//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormziApi.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FormziEntities : DbContext
    {
        public FormziEntities()
            : base("name=FormziEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AppLogin> AppLogins { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<AppUserInfo> AppUserInfoes { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Dashboard> Dashboards { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EmployeeForm> EmployeeForms { get; set; }
        public virtual DbSet<EmployeeLocation> EmployeeLocations { get; set; }
        public virtual DbSet<EmployeeRole> EmployeeRoles { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FormAnswer> FormAnswers { get; set; }
        public virtual DbSet<FormQuestion> FormQuestions { get; set; }
        public virtual DbSet<FormSectionRole> FormSectionRoles { get; set; }
        public virtual DbSet<FormSection> FormSections { get; set; }
        public virtual DbSet<FormSubmission> FormSubmissions { get; set; }
        public virtual DbSet<FormTool> FormTools { get; set; }
        public virtual DbSet<FormVersion> FormVersions { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LocalStringResource> LocalStringResources { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<OperationSetting> OperationSettings { get; set; }
        public virtual DbSet<PieChartQueryResult> PieChartQueryResults { get; set; }
        public virtual DbSet<PostLocation> PostLocations { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectForm> ProjectForms { get; set; }
        public virtual DbSet<QueryTableResult> QueryTableResults { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<SubmissionEmployeeMap> SubmissionEmployeeMaps { get; set; }
        public virtual DbSet<SubscriberLanguage> SubscriberLanguages { get; set; }
        public virtual DbSet<Subscriber> Subscribers { get; set; }
        public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }
        public virtual DbSet<RoleReportsTo> RoleReportsToes { get; set; }
        public virtual DbSet<UserReportTo> UserReportToes { get; set; }
        public virtual DbSet<SubmissionLog> SubmissionLogs { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
    
        [DbFunction("FormziEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[FormziEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        [DbFunction("FormziEntities", "udf_GetEmployeeDetailby_Appinfo_Employee_Id")]
        public virtual IQueryable<udf_GetEmployeeDetailby_Appinfo_Employee_Id_Result> udf_GetEmployeeDetailby_Appinfo_Employee_Id(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udf_GetEmployeeDetailby_Appinfo_Employee_Id_Result>("[FormziEntities].[udf_GetEmployeeDetailby_Appinfo_Employee_Id](@Id)", idParameter);
        }
    
        public virtual ObjectResult<GenerateFormTable_Result> GenerateFormTable(Nullable<int> formID, Nullable<int> formVersionID, Nullable<int> qID, string strParam)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var formVersionIDParameter = formVersionID.HasValue ?
                new ObjectParameter("FormVersionID", formVersionID) :
                new ObjectParameter("FormVersionID", typeof(int));
    
            var qIDParameter = qID.HasValue ?
                new ObjectParameter("QID", qID) :
                new ObjectParameter("QID", typeof(int));
    
            var strParamParameter = strParam != null ?
                new ObjectParameter("strParam", strParam) :
                new ObjectParameter("strParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateFormTable_Result>("GenerateFormTable", formIDParameter, formVersionIDParameter, qIDParameter, strParamParameter);
        }
    
        public virtual ObjectResult<GenerateFormTableforChart_Result> GenerateFormTableforChart(Nullable<int> formID, Nullable<int> formVersionID, Nullable<int> formQuestionIDX, Nullable<int> formQuestionIDY, string strParam)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("FormID", formID) :
                new ObjectParameter("FormID", typeof(int));
    
            var formVersionIDParameter = formVersionID.HasValue ?
                new ObjectParameter("FormVersionID", formVersionID) :
                new ObjectParameter("FormVersionID", typeof(int));
    
            var formQuestionIDXParameter = formQuestionIDX.HasValue ?
                new ObjectParameter("FormQuestionIDX", formQuestionIDX) :
                new ObjectParameter("FormQuestionIDX", typeof(int));
    
            var formQuestionIDYParameter = formQuestionIDY.HasValue ?
                new ObjectParameter("FormQuestionIDY", formQuestionIDY) :
                new ObjectParameter("FormQuestionIDY", typeof(int));
    
            var strParamParameter = strParam != null ?
                new ObjectParameter("strParam", strParam) :
                new ObjectParameter("strParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateFormTableforChart_Result>("GenerateFormTableforChart", formIDParameter, formVersionIDParameter, formQuestionIDXParameter, formQuestionIDYParameter, strParamParameter);
        }
    
        public virtual int GetChartDataByFormID(Nullable<int> fromId, Nullable<int> versionId, Nullable<int> xAxis, Nullable<int> yAxis, string columns)
        {
            var fromIdParameter = fromId.HasValue ?
                new ObjectParameter("fromId", fromId) :
                new ObjectParameter("fromId", typeof(int));
    
            var versionIdParameter = versionId.HasValue ?
                new ObjectParameter("versionId", versionId) :
                new ObjectParameter("versionId", typeof(int));
    
            var xAxisParameter = xAxis.HasValue ?
                new ObjectParameter("xAxis", xAxis) :
                new ObjectParameter("xAxis", typeof(int));
    
            var yAxisParameter = yAxis.HasValue ?
                new ObjectParameter("yAxis", yAxis) :
                new ObjectParameter("yAxis", typeof(int));
    
            var columnsParameter = columns != null ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetChartDataByFormID", fromIdParameter, versionIdParameter, xAxisParameter, yAxisParameter, columnsParameter);
        }
    
        public virtual ObjectResult<GetFormSubmissionByMe_Result> GetFormSubmissionByMe(string deviceId, Nullable<int> subscriberId, Nullable<int> isApproved)
        {
            var deviceIdParameter = deviceId != null ?
                new ObjectParameter("DeviceId", deviceId) :
                new ObjectParameter("DeviceId", typeof(string));
    
            var subscriberIdParameter = subscriberId.HasValue ?
                new ObjectParameter("SubscriberId", subscriberId) :
                new ObjectParameter("SubscriberId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFormSubmissionByMe_Result>("GetFormSubmissionByMe", deviceIdParameter, subscriberIdParameter, isApprovedParameter);
        }
    
        public virtual ObjectResult<GetSubmissionByLatLngDis_Result> GetSubmissionByLatLngDis(Nullable<decimal> orig_lat, Nullable<decimal> orig_long, Nullable<decimal> bounding_distance)
        {
            var orig_latParameter = orig_lat.HasValue ?
                new ObjectParameter("orig_lat", orig_lat) :
                new ObjectParameter("orig_lat", typeof(decimal));
    
            var orig_longParameter = orig_long.HasValue ?
                new ObjectParameter("orig_long", orig_long) :
                new ObjectParameter("orig_long", typeof(decimal));
    
            var bounding_distanceParameter = bounding_distance.HasValue ?
                new ObjectParameter("bounding_distance", bounding_distance) :
                new ObjectParameter("bounding_distance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubmissionByLatLngDis_Result>("GetSubmissionByLatLngDis", orig_latParameter, orig_longParameter, bounding_distanceParameter);
        }
    
        public virtual int usp_GetFormSubmissionDetailByFormID(Nullable<int> subscriberId, Nullable<int> fromId, Nullable<int> versionId, Nullable<int> isHtml, Nullable<int> page, Nullable<int> recsPerPage, string path, Nullable<int> appLoginId)
        {
            var subscriberIdParameter = subscriberId.HasValue ?
                new ObjectParameter("subscriberId", subscriberId) :
                new ObjectParameter("subscriberId", typeof(int));
    
            var fromIdParameter = fromId.HasValue ?
                new ObjectParameter("fromId", fromId) :
                new ObjectParameter("fromId", typeof(int));
    
            var versionIdParameter = versionId.HasValue ?
                new ObjectParameter("versionId", versionId) :
                new ObjectParameter("versionId", typeof(int));
    
            var isHtmlParameter = isHtml.HasValue ?
                new ObjectParameter("IsHtml", isHtml) :
                new ObjectParameter("IsHtml", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("RecsPerPage", recsPerPage) :
                new ObjectParameter("RecsPerPage", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var appLoginIdParameter = appLoginId.HasValue ?
                new ObjectParameter("AppLoginId", appLoginId) :
                new ObjectParameter("AppLoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetFormSubmissionDetailByFormID", subscriberIdParameter, fromIdParameter, versionIdParameter, isHtmlParameter, pageParameter, recsPerPageParameter, pathParameter, appLoginIdParameter);
        }
    
        public virtual int usp_GetFormSubmissionDetailByFormID_Demo(Nullable<int> subscriberId, Nullable<int> fromId, Nullable<int> versionId, Nullable<int> isHtml, Nullable<int> page, Nullable<int> recsPerPage, string path, Nullable<int> appLoginId)
        {
            var subscriberIdParameter = subscriberId.HasValue ?
                new ObjectParameter("subscriberId", subscriberId) :
                new ObjectParameter("subscriberId", typeof(int));
    
            var fromIdParameter = fromId.HasValue ?
                new ObjectParameter("fromId", fromId) :
                new ObjectParameter("fromId", typeof(int));
    
            var versionIdParameter = versionId.HasValue ?
                new ObjectParameter("versionId", versionId) :
                new ObjectParameter("versionId", typeof(int));
    
            var isHtmlParameter = isHtml.HasValue ?
                new ObjectParameter("IsHtml", isHtml) :
                new ObjectParameter("IsHtml", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var recsPerPageParameter = recsPerPage.HasValue ?
                new ObjectParameter("RecsPerPage", recsPerPage) :
                new ObjectParameter("RecsPerPage", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var appLoginIdParameter = appLoginId.HasValue ?
                new ObjectParameter("AppLoginId", appLoginId) :
                new ObjectParameter("AppLoginId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetFormSubmissionDetailByFormID_Demo", subscriberIdParameter, fromIdParameter, versionIdParameter, isHtmlParameter, pageParameter, recsPerPageParameter, pathParameter, appLoginIdParameter);
        }
    }
}
